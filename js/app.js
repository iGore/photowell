// Generated by CoffeeScript 1.4.0
var AlbumsCtrl, FriendsCtrl, MetaCtrl, Photowell, PhotowellCtrl, UserCtrl, hasScrollBar, needLoad;

needLoad = function() {
  return $(window).scrollTop() >= ($(document).height() - $(window).height()) * 0.9;
};

hasScrollBar = function() {
  return $(document).height() !== $(window).height() + $(window).scrollTop();
};

$(function() {
  return $('.fancybox').fancybox({
    openEffect: 'elastic',
    closeEffect: 'elastic',
    helpers: {
      title: {
        type: 'over'
      }
    }
  });
});

FB.init({
  appId: '544498978935917',
  frictionlessRequests: true,
  status: true,
  cookie: true
});

Photowell = angular.module('Photowell', []);

Photowell.config(function($routeProvider) {
  return $routeProvider.when('/', {
    controller: UserCtrl,
    templateUrl: 'views/user.html'
  }).when('/stream', {
    controller: PhotowellCtrl,
    templateUrl: 'views/stream.html'
  }).when('/friends', {
    controller: FriendsCtrl,
    templateUrl: 'views/friends.html'
  }).when('/albums', {
    controller: AlbumsCtrl,
    templateUrl: 'views/albums.html'
  }).otherwise({
    redirectTo: '/'
  });
});

Photowell.factory('User', function($rootScope) {
  var storage;
  storage = {
    name: '',
    username: '',
    picture: '',
    access_token: '',
    photos_data: []
  };
  return {
    set: function(key, value) {
      storage[key] = value;
      return $rootScope.$broadcast(key, value);
    },
    push: function(key, value) {
      storage[key].push(value);
      return $rootScope.$broadcast(key, value);
    },
    get: function(key) {
      return storage[key];
    }
  };
});

Photowell.factory('Overlay', function($rootScope) {
  var overlay;
  overlay = null;
  return {
    set: function(value) {
      return overlay = value;
    },
    get: function() {
      return overlay;
    }
  };
});

Photowell.directive('photoWall', function($timeout) {
  return function(scope, element, attr) {
    if (scope.$last) {
      return $timeout(function() {
        return scope.container.freetile({
          animate: true
        });
      });
    }
  };
});

Photowell.directive('whenScrolled', function() {
  return function(scope, elm, attr) {
    var scrollCheck;
    scrollCheck = function(evt) {
      return scope.check();
    };
    return angular.element(window).bind('scroll load', scrollCheck);
  };
});

MetaCtrl = function($scope, User, Overlay) {
  Overlay.set($('.overlay'));
  FB.getLoginStatus(function(response) {
    if (response.status === 'connected') {
      User.set('access_token', response.authResponse.accessToken);
      return $scope.init();
    } else {
      return Overlay.get().fadeIn();
    }
  });
  $scope.login = function() {
    return FB.login(function(response) {
      if (response.authResponse) {
        User.set('access_token', response.authResponse.accessToken);
      }
      return $scope.init();
    }, {
      scope: 'email,user_photos,friends_photos,user_photo_video_tags,friends_photo_video_tags'
    });
  };
  $scope.init = function() {
    return FB.api('/me?fields=name,username,albums,photos,picture.type(large)&access_token=' + User.get('access_token'), function(user) {
      User.set('picture', user.picture.data.url);
      User.set('name', user.name);
      User.set('username', user.username);
      User.set('photos_data', user.photos.data);
      return $.each(user.albums.data, function(index, album) {
        return FB.api('/' + album.id + '/photos?fields=name,images&access_token=' + User.get('access_token'), function(response) {
          return User.set('photos_data', $.merge(User.get('photos_data'), response.data));
        });
      });
      /*
                  photos = []
      
                  $.each user.photos.data, (index, photo)->
                      if photo.images[4] >= 320
                          source = photo.images[4].source
                      else if photo.images[3] >= 320
                          source = photo.images[3].source
                      else 
                          source = photo.images[2].source
      
                      photos.push
                          src: source
                          src_large: photo.images[0].source
                          name: photo.name if photo.name?
      
                  $scope.$apply ->
                      $scope.name = User.get('name')   
                      $scope.picture = User.get('picture')   
                      $scope.username = User.get('username')   
                      $.merge $scope.photos_container, photos   
      
                  $scope.check()
      
                  $.each user.albums.data, (index, album)->
                      FB.api '/' + album.id + '/photos?fields=name,images&access_token=' + User.get('access_token'), (response)-> 
                          photos = []
      
                          $.each response.data, (index, image)->
                              if image.images[4] >= 320
                                  source = image.images[4].source
                              else if image.images[3] >= 320
                                  source = image.images[3].source
                              else 
                                  source = image.images[2].source
      
                              photos.push
                                  src: source
                                  src_large: image.images[0].source
                                  name: image.name if image.name?
                          
                          $scope.$apply ->
                              $.merge $scope.photos_container, photos  
      
                          $scope.check()
      
                  $scope.overlay.fadeOut('slow')
      */

    });
  };
  return $scope.$on('name', function(events, name) {
    return $scope.$apply(function() {
      return $scope.name = name;
    });
  });
};

UserCtrl = function($scope, User, Overlay) {
  $scope.container = $('.container');
  $scope.name = User.get('name');
  $scope.username = User.get('username');
  $scope.picture = User.get('picture');
  $scope.check = function() {
    var photos, photos_data;
    if (needLoad() || !hasScrollBar()) {
      if (!$scope.hasOwnProperty('photos')) {
        $scope.photos = [];
      }
      photos_data = User.get('photos_data').slice(0, 20);
      User.set('photos_data', User.get('photos_data').slice(20));
      photos = [];
      $.each(photos_data, function(index, photo) {
        var source;
        if (photo.images[4] >= 320) {
          source = photo.images[4].source;
        } else if (photo.images[3] >= 320) {
          source = photo.images[3].source;
        } else {
          source = photo.images[2].source;
        }
        return photos.push({
          src: source,
          src_large: photo.images[0].source,
          name: photo.name != null ? photo.name : void 0
        });
      });
      $scope.$apply(function() {
        return $.merge($scope.photos, photos);
      });
      return $.each(User.get('photos_data').slice(0, 20), function(index, img) {
        return (new Image()).src = img.src;
      });
      /*
                  $scope.$apply ->
                      $.merge $scope.photos, $scope.photos_container.slice 0, 20
                      $scope.photos_container = $scope.photos_container.slice 20 
      
                  $.each $scope.photos_container.slice(0, 20), (index, img)-> 
                      (new Image()).src = img.src
      */

    }
  };
  /*
      $scope.init = ->
          FB.getLoginStatus (response)-> 
              if response.status is 'connected'
                  User.set 'access_token', response.authResponse.accessToken
                  
                  $scope.initUser() 
              else
                  Overlay.get().fadeIn()  
      
      $scope.login = ->
          FB.login (response)->
              User.set 'access_token', response.authResponse.accessToken if response.authResponse
              
              $scope.initUser()
          ,
          scope: 'email,user_photos,friends_photos,user_photo_video_tags,friends_photo_video_tags'
  */

  $scope.$on('name', function(events, name) {
    return $scope.$apply(function() {
      return $scope.name = name;
    });
  });
  $scope.$on('username', function(events, username) {
    return $scope.$apply(function() {
      return $scope.username = username;
    });
  });
  $scope.$on('picture', function(events, picture) {
    return $scope.$apply(function() {
      return $scope.picture = picture;
    });
    /*
            $scope.$apply ->
                $scope.check()
    */

  });
  $scope.$on('photos_data', function(events, photos_data) {
    return $scope.check();
  });
  if (User.get('photos_data').length !== 0) {
    return $scope.check();
  }
  /*
      $scope.initUser = ->
          FB.api '/me?fields=name,username,albums,photos,picture.type(large)&access_token=' + User.get('access_token'), (user)->
              User.set 'picture', user.picture.data.url
              User.set 'name', user.name
              User.set 'username', user.username
  
              photos = []
  
              $.each user.photos.data, (index, photo)->
                  if photo.images[4] >= 320
                      source = photo.images[4].source
                  else if photo.images[3] >= 320
                      source = photo.images[3].source
                  else 
                      source = photo.images[2].source
  
                  photos.push
                      src: source
                      src_large: photo.images[0].source
                      name: photo.name if photo.name?
  
              $scope.$apply ->
                  $scope.name = User.get('name')   
                  $scope.picture = User.get('picture')   
                  $scope.username = User.get('username')   
                  $.merge $scope.photos_container, photos   
  
              $scope.check()
  
              $.each user.albums.data, (index, album)->
                  FB.api '/' + album.id + '/photos?fields=name,images&access_token=' + User.get('access_token'), (response)-> 
                      photos = []
  
                      $.each response.data, (index, image)->
                          if image.images[4] >= 320
                              source = image.images[4].source
                          else if image.images[3] >= 320
                              source = image.images[3].source
                          else 
                              source = image.images[2].source
  
                          photos.push
                              src: source
                              src_large: image.images[0].source
                              name: image.name if image.name?
                      
                      $scope.$apply ->
                          $.merge $scope.photos_container, photos  
  
                      $scope.check()
  
              Elements.get('overlay').fadeOut('slow')
      $scope.check = ->
          if needLoad() or not hasScrollBar()
              if not $scope.hasOwnProperty('photos')
                  $scope.photos = []
  
              $scope.$apply ->
                  $.merge $scope.photos, $scope.photos_container.slice 0, 20
                  $scope.photos_container = $scope.photos_container.slice 20 
  
              $.each $scope.photos_container.slice(0, 20), (index, img)-> 
                  (new Image()).src = img.src
  */

};

FriendsCtrl = function($scope, $location, User) {
  $scope.friends = [];
  $scope.images = [];
  $scope.images_container = [];
  $scope.container = $('.container');
  FB.getLoginStatus(function(response) {
    if (response.status !== 'connected') {
      return $scope.$apply(function() {
        return $location.path('/');
      });
    } else {
      return FB.api('/me/friends?fields=name,username,albums,picture.type(square)&access_token=' + User.get('access_token'), function(response) {
        $scope.friends = [];
        $scope.images = [];
        return $.each(response.data, function(index, user) {
          $scope.$apply(function() {
            return $scope.friends.push({
              picture: user.picture.data.url,
              name: user.name,
              username: user.username
            });
          });
          if (!(user.albums != null)) {
            return true;
          }
          return FB.api('/' + user.id + '/photos?fields=name,images&access_token=' + User.get('access_token'), function(response) {
            var images;
            images = [];
            $.each(response.data, function(index, image) {
              var source;
              if (image.images[4] >= 320) {
                source = image.images[4].source;
              } else if (image.images[3] >= 320) {
                source = image.images[3].source;
              } else {
                source = image.images[2].source;
              }
              return images.push({
                src: source,
                src_large: image.images[0].source,
                name: image.name != null ? image.name : void 0
              });
            });
            $scope.$apply(function() {
              return $.merge($scope.images_container, images);
            });
            return $scope.check();
          });
        });
      });
    }
  });
  return $scope.check = function() {
    if (needLoad()) {
      $scope.$apply(function() {
        $.merge($scope.images, $scope.images_container.slice(0, 20));
        return $scope.images_container = $scope.images_container.slice(20);
      });
      return $.each($scope.images_container.slice(0, 20), function(index, img) {
        return (new Image()).src = img.src;
      });
    }
  };
  /*
      FB.login (response)->
          access_token = response.authResponse.accessToken if response
  
          FB.api '/me/friends?fields=name,username,albums,picture.type(square)&access_token=' + access_token, (response)->
              $scope.friends = []
              $scope.images = []
  
              $.each response.data, (index, user)->
                  $scope.$apply ->
                      $scope.friends.push 
                          picture: user.picture.data.url
                          name: user.name
                          username: user.username
  
                  return true if not user.albums?
  
                  FB.api '/' + user.id + '/photos?fields=name,images,source&access_token=' + access_token, (response)-> 
                      images = []
  
                      $.each response.data, (index, image)->
                          if image.images[4] >= 320
                              source = image.images[4].source
                          else if image.images[3] >= 320
                              source = image.images[3].source
                          else 
                              source = image.images[2].source
  
                          images.push
                              src: source
                              name: image.name if image.name?
                      
  
                      $scope.$apply ->
                          $.merge $scope.images, images  
  
                  return 3 > $scope.friends.length
      ,
      scope: 'email,user_photos,friends_photos,user_photo_video_tags,friends_photo_video_tags'
  */

};

AlbumsCtrl = function($scope) {};

PhotowellCtrl = function($scope) {
  $scope.friends = [];
  $scope.images = [];
  $scope.imageContainer = $('.container');
  console.log('Photowell');
  return $scope.login = function() {
    return FB.login(function(response) {
      var access_token;
      if (response) {
        access_token = response.authResponse.accessToken;
      }
      return FB.api('/me/friends?fields=name,username,albums,picture.type(square)&access_token=' + access_token, function(response) {
        $scope.friends = [];
        $scope.images = [];
        return $.each(response.data, function(index, user) {
          $scope.$apply(function() {
            return $scope.friends.push({
              picture: user.picture.data.url,
              name: user.name,
              username: user.username
            });
          });
          if (!(user.albums != null)) {
            return true;
          }
          FB.api('/' + user.id + '/photos?fields=name,images,source&access_token=' + access_token, function(response) {
            var images;
            images = [];
            $.each(response.data, function(index, image) {
              var source;
              if (image.images[4] >= 320) {
                source = image.images[4].source;
              } else if (image.images[3] >= 320) {
                source = image.images[3].source;
              } else {
                source = image.images[2].source;
              }
              return images.push({
                src: source,
                name: image.name != null ? image.name : void 0
              });
            });
            return $scope.$apply(function() {
              return $.merge($scope.images, images);
            });
          });
          /*
                              $.each user.albums.data, (index, album)->
                                  FB.api '/' + album.id + '/photos?access_token=' + access_token, (response)->
                                      images = []
          
                                      $.each response.data, (index, album)->
                                          images.push 
                                              src: album.source
          
                                          return 20 > images.length
          
                                      $scope.$apply ->
                                          $.merge $scope.images, images
          */

          return 3 > $scope.friends.length;
        });
      });
    }, {
      scope: 'email,user_photos,friends_photos,user_photo_video_tags,friends_photo_video_tags'
    });
  };
};
