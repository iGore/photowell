// Generated by CoffeeScript 1.4.0
/*
Facebook init
*/

var AlbumsCtrl, FriendsCtrl, MetaCtrl, Photowell, StreamCtrl, UserCtrl;

FB.init({
  appId: '544498978935917',
  frictionlessRequests: true,
  status: true,
  cookie: true
});

/*
DOM ready
*/


angular.element(document).ready(function() {
  return $('.fancybox').fancybox({
    openEffect: 'elastic',
    closeEffect: 'elastic',
    helpers: {
      title: {
        type: 'over'
      }
    }
  });
});

/*
App: Photowell
*/


Photowell = angular.module('Photowell', []);

/*
Routes
*/


Photowell.config(function($routeProvider) {
  return $routeProvider.when('/', {
    controller: UserCtrl,
    templateUrl: 'views/user.html'
  }).when('/stream', {
    controller: StreamCtrl,
    templateUrl: 'views/stream.html'
  }).when('/friends', {
    controller: FriendsCtrl,
    templateUrl: 'views/friends.html'
  }).when('/albums', {
    controller: AlbumsCtrl,
    templateUrl: 'views/albums.html'
  }).otherwise({
    redirectTo: '/'
  });
});

/*
Globale Funktionen
*/


Photowell.run(function($rootScope) {
  $rootScope.needLoad = function() {
    return $(window).scrollTop() >= ($(document).height() - $(window).height()) * 0.9;
  };
  $rootScope.hasScrollBar = function() {
    return $(document).height() !== $(window).height() + $(window).scrollTop();
  };
  return $rootScope.formatImage = function(image) {
    var source;
    if (image.images[4] >= 320) {
      source = image.images[4].source;
    } else if (image.images[3] >= 320) {
      source = image.images[3].source;
    } else {
      source = image.images[2].source;
    }
    return {
      src: source,
      src_large: image.images[0].source,
      name: image.name != null ? image.name : void 0
    };
  };
});

/*
User factory
*/


Photowell.factory('User', function($rootScope) {
  var storage;
  storage = {
    name: '',
    username: '',
    picture: '',
    access_token: '',
    user_photos: [],
    user_photos_data: []
  };
  return {
    set: function(key, value, broadcast) {
      if (broadcast == null) {
        broadcast = true;
      }
      storage[key] = value;
      if (broadcast) {
        $rootScope.$broadcast(key, value);
      }
      return this;
    },
    push: function(key, value, broadcast) {
      if (broadcast == null) {
        broadcast = true;
      }
      storage[key].push(value);
      if (broadcast) {
        $rootScope.$broadcast(key, value);
      }
      return this;
    },
    merge: function(key, value, broadcast) {
      if (broadcast == null) {
        broadcast = true;
      }
      $.merge(storage[key], value);
      if (broadcast) {
        $rootScope.$broadcast(key, value);
      }
      return this;
    },
    get: function(key) {
      return storage[key];
    }
  };
});

/*
Friends factory
*/


Photowell.factory('Friends', function($rootScope) {
  var storage;
  storage = {
    friends_photos_data: [],
    friends_photos: []
  };
  return {
    set: function(key, value, broadcast) {
      if (broadcast == null) {
        broadcast = true;
      }
      storage[key] = value;
      if (broadcast) {
        $rootScope.$broadcast(key, value);
      }
      return this;
    },
    push: function(key, value, broadcast) {
      if (broadcast == null) {
        broadcast = true;
      }
      storage[key].push(value);
      if (broadcast) {
        $rootScope.$broadcast(key, value);
      }
      return this;
    },
    merge: function(key, value, broadcast) {
      if (broadcast == null) {
        broadcast = true;
      }
      $.merge(storage[key], value);
      if (broadcast) {
        $rootScope.$broadcast(key, value);
      }
      return this;
    },
    get: function(key) {
      return storage[key];
    }
  };
});

/*
Overlay factory

Speichert das Overlay Element, so das es nur einmal vorhanden ist und 
von allen Controllern benutzt werden kann.
*/


Photowell.factory('Overlay', function($rootScope) {
  var overlay;
  overlay = null;
  return {
    set: function(value) {
      overlay = value;
      return this;
    },
    get: function() {
      return overlay;
    }
  };
});

/*
Monitor factory

Stellt Monitor Objekte bereit um eine Synchrone
*/


Photowell.factory('Monitor', function($rootScope) {
  var monitor;
  monitor = 'in_process';
  return {
    set: function(key, value) {
      monitor[key] = value;
      return this;
    },
    get: function(key) {
      return monitor[key];
    }
  };
});

/*
Directive: photo-wall

Ein Directive welches dazu dient, nach dem aufbau des DOM's, die 
Bilder neu anzuordnen bzw. die neu dazugekommen Bilder unten richtig anordnen.
*/


Photowell.directive('photoWall', function($timeout) {
  return function(scope, element, attr) {
    if (!scope.$last) {
      return;
    }
    return $timeout(function() {
      scope.container.freetile({
        animate: true
      });
      return scope.monitor.set('in_process', false);
    });
  };
});

/*
Directive: when-scrolled

Ein Directive an dem das scroll-Event angeh√§gt ist.
*/


Photowell.directive('whenScrolled', function() {
  return function(scope, elm, attr) {
    var scrollCheck;
    scrollCheck = function(evt) {
      return scope.check();
    };
    return angular.element(window).bind('scroll load', scrollCheck);
  };
});

/*
Meta Controller
*/


MetaCtrl = function($scope, $location, User, Overlay) {
  Overlay.set($('.overlay'));
  FB.getLoginStatus(function(response) {
    if (response.status === 'connected') {
      return User.set('access_token', response.authResponse.accessToken);
    } else {
      $scope.$apply(function() {
        if ($location.$$path !== '/') {
          return $location.path('/');
        }
      });
      return Overlay.get().fadeIn();
    }
  });
  $scope.login = function() {
    return FB.login(function(response) {
      if (response.authResponse) {
        return User.set('access_token', response.authResponse.accessToken);
      }
    }, {
      scope: 'email,user_photos,friends_photos,user_photo_video_tags,friends_photo_video_tags'
    });
  };
  $scope.init = function() {
    return FB.api('/me?fields=name,username,albums,photos,picture.type(large)&access_token=' + User.get('access_token'), function(user) {
      User.set('picture', user.picture.data.url);
      User.set('name', user.name);
      User.set('username', user.username);
      User.set('user_photos_data', $.map(user.photos.data, function(photo) {
        return $scope.formatImage(photo);
      }));
      angular.forEach(user.albums.data, function(album) {
        return FB.api('/' + album.id + '/photos?fields=name,images&access_token=' + User.get('access_token'), function(photos) {
          return User.merge('user_photos_data', $.map(photos.data, function(photo) {
            return $scope.formatImage(photo);
          }));
        });
      });
      return Overlay.get().fadeOut('slow');
    });
  };
  $scope.$on('name', function(events, name) {
    return $scope.$apply(function() {
      return $scope.name = name;
    });
  });
  return $scope.$on('access_token', function(events, access_token) {
    return $scope.init();
  });
};

/*
User Controller
*/


UserCtrl = function($scope, User, Overlay, Monitor) {
  $scope.container = $('.container');
  $scope.monitor = Monitor.set('in_process', false);
  $scope.name = User.get('name');
  $scope.username = User.get('username');
  $scope.picture = User.get('picture');
  $scope.photos = User.get('user_photos');
  $scope.check = function() {
    if (($scope.needLoad() || !$scope.hasScrollBar()) && !$scope.monitor.get('in_process')) {
      if (User.get('user_photos_data').length === 0) {
        return;
      }
      $scope.monitor.set('in_process', true);
      User.merge('user_photos', User.get('user_photos_data').slice(0, 20));
      User.set('user_photos_data', User.get('user_photos_data').slice(20), false);
      return angular.forEach(User.get('user_photos_data').slice(0, 20), function(img) {
        return (new Image()).src = img.src;
      });
    }
  };
  $scope.$on('name', function(events, name) {
    return $scope.$apply(function() {
      return $scope.name = name;
    });
  });
  $scope.$on('username', function(events, username) {
    return $scope.$apply(function() {
      return $scope.username = username;
    });
  });
  $scope.$on('picture', function(events, picture) {
    return $scope.$apply(function() {
      return $scope.picture = picture;
    });
  });
  $scope.$on('user_photos', function(events, user_photos) {
    return $scope.$apply(function() {});
  });
  $scope.$on('user_photos_data', function(events, user_photos_data) {
    return $scope.check();
  });
  if (User.get('user_photos_data').length !== 0) {
    return $scope.check();
  }
};

/*
Stream Controller
*/


StreamCtrl = function($scope) {};

/*
Friends Controller
*/


FriendsCtrl = function($scope, Friends, User, Monitor) {
  $scope.container = $('.container');
  $scope.monitor = Monitor.set('in_process', false);
  $scope.images = Friends.get('friends_photos');
  $scope.init = function() {
    return FB.api('/me/friends?fields=name,username,albums,picture.type(square)&access_token=' + User.get('access_token'), function(friends) {
      return angular.forEach(friends.data, function(friend) {
        /*
                        Albums.set 'picture', friend.picture.data.url
                        Albums.set 'name', friend.name
                        Albums.set 'username', friend.username
                        Albums.set 'albums', friend.albums.data
        */
        return FB.api('/' + friend.id + '/photos?fields=name,images&access_token=' + User.get('access_token'), function(photos) {
          return Friends.set('friends_photos_data', $.merge(Friends.get('friends_photos_data'), $.map(photos.data, function(photo) {
            return $scope.formatImage(photo);
          })));
        });
      });
    });
  };
  $scope.check = function() {
    if (($scope.needLoad() || !$scope.hasScrollBar()) && !$scope.monitor.get('in_process')) {
      if (Friends.get('friends_photos_data').length < 20) {
        return;
      }
      $scope.monitor.set('in_process', true);
      Friends.merge('friends_photos', Friends.get('friends_photos_data').slice(0, 20));
      Friends.set('friends_photos_data', Friends.get('friends_photos_data').slice(20), false);
      return angular.forEach(Friends.get('friends_photos_data').slice(0, 20), function(img) {
        return (new Image()).src = img.src;
      });
    }
  };
  /*
      FB.getLoginStatus (response)-> 
          if response.status isnt 'connected'
              $scope.$apply ->
                  $location.path '/'
          else 
  
              FB.api '/me/friends?fields=name,username,albums,picture.type(square)&access_token=' + User.get('access_token'), (response)->
                  $scope.friends = []
                  $scope.images = []
  
                  $.each response.data, (index, user)->
                      $scope.$apply ->
                          $scope.friends.push 
                              picture: user.picture.data.url
                              name: user.name
                              username: user.username
  
                      return true if not user.albums?
  
                      FB.api '/' + user.id + '/photos?fields=name,images&access_token=' + User.get('access_token'), (response)-> 
                          images = []
  
                          $.each response.data, (index, image)->
                              if image.images[4] >= 320
                                  source = image.images[4].source
                              else if image.images[3] >= 320
                                  source = image.images[3].source
                              else 
                                  source = image.images[2].source
  
                              images.push
                                  src: source
                                  src_large: image.images[0].source
                                  name: image.name if image.name?
                          
                          $scope.$apply ->
                              $.merge $scope.images_container, images  
  
                          $scope.check()
  */

  $scope.$on('friends_photos', function(events, friends_photos) {
    return $scope.$apply(function() {});
  });
  $scope.$on('friends_photos_data', function(events, friends_photos_data) {
    return $scope.check();
  });
  $scope.$on('access_token', function(events, photos_data) {
    return $scope.init();
  });
  if (Friends.get('friends_photos_data').length !== 0) {
    $scope.check();
  }
  if (User.get('access_token')) {
    return $scope.init();
  }
};

/*
Album Controller
*/


AlbumsCtrl = function($scope) {};
